"""Return an array of objects with interesting data for the user.

We want one object per payday, but the user probably didn't participate in
every payday. Our solution is to fetch all paydays and all of the user's
transfers, and then loop through transfers and aggregate into the relevant
payday object.

If the user has never received, we return an empty array. Client code can take
this to mean, "no chart."

We specifically don't worry about double-counting npatrons for out-of-band
transfers. That's a rare case right now, pretty much only when someone
deactivates their account and distributes their balance as a final gift. It
could become much more common in a one-off payments world, depending on how the
implementation.

"""
import re

from aspen import json


callback_pattern = re.compile(r'^[_A-Za-z0-9.]+$')


[---]

username = path['username']

anonymous = website.db.one("""

    SELECT anonymous_receiving
      FROM participants
     WHERE username = %s

""", (username,))

if anonymous:
    if user.ANON or user.participant.username != username and not user.ADMIN:
        response.body = {'error': 'unauthorized'}
        raise response


# Fetch data from the database.
# =============================

paydays = website.db.all("""

      SELECT p.ts_start
           , p.ts_start::date   AS date
           , 0                  AS npatrons
           , 0.00               AS receipts
        FROM paydays p
    ORDER BY ts_start DESC

""", back_as=dict)

transfers = website.db.all("""\

   SELECT timestamp
        , amount
        , tipper
     FROM transfers
    WHERE tippee=%s
      AND context <> 'take-over'
 ORDER BY timestamp DESC

""", (username,), back_as=dict)


if not transfers:

    # This user has never received money.
    # ===================================
    # Send out an empty array, to trigger no charts.

    paydays = []


if paydays:

    # Set up a generator to cursor through paydays.
    # =============================================

    def genpaydays():
        for payday in paydays:
            yield payday
    paydaygen = genpaydays()

    curpayday = next(paydaygen)


    # Loop through transfers, advancing payday cursor as appropriate.
    # ===============================================================

    for transfer in transfers:
        while transfer['timestamp'] < curpayday['ts_start']:
            del curpayday['ts_start']   # done with it, don't want it in output
            curpayday = next(paydaygen)

        curpayday['npatrons'] += 1
        curpayday['receipts'] += transfer['amount']


# Prepare response.
# =================

response.body = paydays[:-1]  # don't show Gittip #0
response.headers["Access-Control-Allow-Origin"] = "*"

# JSONP - see https://github.com/gittip/aspen-python/issues/138
callback = qs.get('callback')
if callback is not None:
    if callback_pattern.match(callback) is None:
        response.code = 400
        response.body = {"error": "bad callback"}
    else:
        response.body = "%s(%s)" % (callback, json.dumps(response.body))
        response.headers['Content-Type'] = 'application/javascript'
